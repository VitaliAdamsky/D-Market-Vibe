import { ServantsConfigOperator } from "#global/servant-config.ts";
import { Colors } from "#colors/models/colors.ts";

/**
 * –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã–º–∏ –æ —Ü–≤–µ—Ç–∞—Ö.
 * –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π —Ü–≤–µ—Ç–æ–≤.
 */
export class ColorsRepository {
  /**
   * –ö—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ —Ü–≤–µ—Ç–∞—Ö –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞.
   * @private
   */
  private static cachedColors: Colors | undefined;

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π, –∑–∞–≥—Ä—É–∂–∞—è –∏ –∫—ç—à–∏—Ä—É—è –¥–∞–Ω–Ω—ã–µ –æ —Ü–≤–µ—Ç–∞—Ö.
   * –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ —Å–ª–µ–¥—É–µ—Ç –≤—ã–∑—ã–≤–∞—Ç—å –æ–¥–∏–Ω —Ä–∞–∑ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
   * @param {boolean} [useDefault=false] - –ï—Å–ª–∏ true, –∑–∞–≥—Ä—É–∂–∞–µ—Ç –∏ –∫—ç—à–∏—Ä—É–µ—Ç —Ü–≤–µ—Ç–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.
   * @returns {Promise<void>}
   */
  public static async initialize(useDefault = false): Promise<void> {
    this.cachedColors = await this.getColors(useDefault);

    if (this.cachedColors) {
      console.log("üåà CoinsRepo ‚Üí –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω...");
    } else {
      console.error("‚ùå Failed to cache colors during initialization.");
    }
  }

  /**
   * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ü–≤–µ—Ç–∞.
   * –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –≤—ã–∑–≤–∞–ª–∏ `initialize()` –ø–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —ç—Ç–æ–≥–æ –º–µ—Ç–æ–¥–∞.
   * @returns {Colors | undefined} –û–±—ä–µ–∫—Ç —Å —Ü–≤–µ—Ç–∞–º–∏ –∏–ª–∏ undefined, –µ—Å–ª–∏ –∫—ç—à –ø—É—Å—Ç.
   */
  public static getCachedColors(): Colors | undefined {
    return this.cachedColors;
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –æ–±—ä–µ–∫—Ç —Å —Ü–≤–µ—Ç–∞–º–∏ —Å —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ API.
   * –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ –≤—Å–µ–≥–¥–∞ –≤—ã–ø–æ–ª–Ω—è–µ—Ç —Å–µ—Ç–µ–≤–æ–π –∑–∞–ø—Ä–æ—Å, –∏–≥–Ω–æ—Ä–∏—Ä—É—è –∫—ç—à.
   * @param {boolean} [useDefault=false] - –ï—Å–ª–∏ true, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Ü–≤–µ—Ç–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.
   * @returns {Promise<Colors | undefined>} –û–±—ä–µ–∫—Ç —Å —Ü–≤–µ—Ç–∞–º–∏ –∏–ª–∏ undefined –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏.
   */
  public static async getColors(
    useDefault = false
  ): Promise<Colors | undefined> {
    const config = ServantsConfigOperator.getConfig();
    const endpoint = useDefault ? "/api/colors/get-default" : "/api/colors/get";
    const url = `${config.utilsApi}${endpoint}`;

    try {
      const response = await fetch(url, {
        method: "GET",
        headers: {
          Accept: "application/json",
        },
      });

      if (!response.ok) {
        // –í—ã–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É, –µ—Å–ª–∏ HTTP-—Å—Ç–∞—Ç—É—Å –Ω–µ —É—Å–ø–µ—à–Ω—ã–π
        throw new Error(`Failed to fetch colors. Status: ${response.status}`);
      }

      const result: Colors | { error: unknown } = await response.json();

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤–µ—Ä–Ω—É–ª –ª–∏ API –æ—à–∏–±–∫—É –≤ —Ç–µ–ª–µ –æ—Ç–≤–µ—Ç–∞
      if ("error" in result) {
        throw new Error(
          `API returned an error: ${JSON.stringify(result.error)}`
        );
      }

      return result;
    } catch (error) {
      console.error("‚ùå [ColorsRepository.getColors] Error:", error);
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º undefined, —á—Ç–æ–±—ã –≤—ã–∑—ã–≤–∞—é—â–∏–π –∫–æ–¥ –º–æ–≥ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ—à–∏–±–∫—É
      return undefined;
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç (—Å–æ—Ö—Ä–∞–Ω—è–µ—Ç) –æ–±—ä–µ–∫—Ç —Å —Ü–≤–µ—Ç–∞–º–∏ –Ω–∞ —É–¥–∞–ª–µ–Ω–Ω—ã–π API.
   * –¢–∞–∫–∂–µ –æ–±–Ω–æ–≤–ª—è–µ—Ç –ª–æ–∫–∞–ª—å–Ω—ã–π –∫—ç—à –≤ —Å–ª—É—á–∞–µ —É—Å–ø–µ—Ö–∞.
   * @param {Colors} data - –û–±—ä–µ–∫—Ç —Å —Ü–≤–µ—Ç–∞–º–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è.
   * @param {boolean} [isDefault=false] - –ï—Å–ª–∏ true, —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ü–≤–µ—Ç–∞ –∫–∞–∫ –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ.
   * @returns {Promise<boolean>} –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç true –≤ —Å–ª—É—á–∞–µ —É—Å–ø–µ—Ö–∞ –∏ false –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏.
   */
  public static async saveColors(
    data: Colors,
    isDefault = false
  ): Promise<boolean> {
    const config = ServantsConfigOperator.getConfig();
    const endpoint = isDefault ? "/api/colors/set-default" : "/api/colors/set";
    const url = `${config.utilsApi}${endpoint}`;

    try {
      const response = await fetch(url, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify(data),
      });

      if (!response.ok) {
        throw new Error(`Failed to post colors. Status: ${response.status}`);
      }

      const result = await response.json();
      console.log("‚úÖ [ColorsRepository.saveColors] Success:", result);

      // –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à, –µ—Å–ª–∏ —Å–æ—Ö—Ä–∞–Ω—è–ª–∏ –Ω–µ –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ —Ü–≤–µ—Ç–∞
      if (!isDefault) {
        this.cachedColors = data;
      }

      return true;
    } catch (error) {
      console.error("‚ùå [ColorsRepository.saveColors] Error:", error);
      return false;
    }
  }
}
