// coin_repo.ts

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö –∏–∑ –≤–∞—à–∏—Ö –º–æ–¥–µ–ª–µ–π.
// –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ —ç—Ç–∏ –ø—É—Ç–∏ —Ä–∞–∑—Ä–µ—à–∞—é—Ç—Å—è —á–µ—Ä–µ–∑ –≤–∞—à importMap.
import { Coin } from "#models/coin.ts";
import { CoinType } from "#models/coin-type.ts";
import { Dominant } from "#models/dominant.ts";

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π –∫–ª–∞—Å—Å ServantsConfigOperator –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ API.
// –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ —ç—Ç–æ—Ç –ø—É—Ç—å —Ä–∞–∑—Ä–µ—à–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ –≤–∞—à importMap.
import { ServantsConfigOperator } from "#global/servant-config.ts";

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —É—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Å–∂–∞—Ç–∏—è –∏ —Ä–∞—Å–ø–∞–∫–æ–≤–∫–∏.
// –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ —ç—Ç–∏ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–æ—Å—Ç—É–ø–Ω—ã –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –ø—É—Ç–∏.
// –ï—Å–ª–∏ —É –≤–∞—Å –Ω–µ—Ç —ç—Ç–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π, –≤–∞–º –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –∏—Ö —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –∏–ª–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–∑ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π –±–∏–±–ª–∏–æ—Ç–µ–∫–∏.
import {
  compressToGzipBase64Async,
  decompressFromGzipBase64Async,
} from "#shared/utils/compression-utils.ts"; // <-- –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —ç—Ç–æ—Ç –ø—É—Ç—å –≤–µ—Ä–µ–Ω

/**
 * –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å, –æ–ø–∏—Å—ã–≤–∞—é—â–∏–π –æ–∂–∏–¥–∞–µ–º—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞ –æ—Ç API –º–æ–Ω–µ—Ç.
 * –û—Å–Ω–æ–≤–∞–Ω–æ –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ `binanceCoins` –∏ `bybitCoins` –≤ –∏—Å—Ö–æ–¥–Ω–æ–º –∫–æ–¥–µ.
 */
interface CoinsApiResponse {
  binanceCoins: Coin[];
  bybitCoins: Coin[];
  // –î–æ–±–∞–≤—å—Ç–µ –¥—Ä—É–≥–∏–µ —Å–≤–æ–π—Å—Ç–≤–∞, –µ—Å–ª–∏ API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏—Ö
}

/**
 * –ü—Ä–æ—Å—Ç–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –∫—ç—à–∞ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏.
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π TTL.
 */
class ServantConfigCache<K, V> {
  // –ò–∑–º–µ–Ω–µ–Ω —Ç–∏–ø V –Ω–∞ –±–æ–ª–µ–µ –æ–±—â–∏–π, —Ç–∞–∫ –∫–∞–∫ —Ç–µ–ø–µ—Ä—å –æ–Ω –º–æ–∂–µ—Ç —Ö—Ä–∞–Ω–∏—Ç—å { data: string }
  private cache = new Map<K, V>();
  private stdTTL: number; // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –≤—Ä–µ–º—è –∂–∏–∑–Ω–∏ (Time To Live) –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∫—ç—à–∞

  constructor(options: { stdTTL: number }) {
    this.stdTTL = options.stdTTL; // –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã, TTL –∑–¥–µ—Å—å –Ω–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω, –Ω–æ —Å–≤–æ–π—Å—Ç–≤–æ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç.
  }

  /**
   * –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –∫—ç—à –ø–æ –∑–∞–¥–∞–Ω–Ω–æ–º—É –∫–ª—é—á—É.
   * @param key –ö–ª—é—á, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É –±—É–¥–µ—Ç —Ö—Ä–∞–Ω–∏—Ç—å—Å—è –∑–Ω–∞—á–µ–Ω–∏–µ.
   * @param value –ó–Ω–∞—á–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å.
   */
  set(key: K, value: V): void {
    this.cache.set(key, value);
  }

  /**
   * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ –∫—ç—à–∞ –ø–æ –∑–∞–¥–∞–Ω–Ω–æ–º—É –∫–ª—é—á—É.
   * @param key –ö–ª—é—á –∑–Ω–∞—á–µ–Ω–∏—è.
   * @returns –ó–Ω–∞—á–µ–Ω–∏–µ, —Å–≤—è–∑–∞–Ω–Ω–æ–µ —Å –∫–ª—é—á–æ–º, –∏–ª–∏ `undefined`, –µ—Å–ª–∏ –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω.
   */
  get(key: K): V | undefined {
    return this.cache.get(key);
  }
}

/**
 * –ö–ª–∞—Å—Å `BinanceDominantCache` —É–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –∫—ç—à–∞–º–∏ –¥–ª—è –¥–æ–º–∏–Ω–∏—Ä—É—é—â–∏—Ö –º–æ–Ω–µ—Ç.
 * –û–Ω —Å–æ–¥–µ—Ä–∂–∏—Ç –æ—Ç–¥–µ–ª—å–Ω—ã–µ —ç–∫–∑–µ–º–ø–ª—è—Ä—ã `ServantConfigCache` –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ –º–æ–Ω–µ—Ç
 * –∏ –±–∏—Ä–∂ (Binance, Bybit, Spot, Perps).
 */
class BinanceDominantCache {
  // –ö—ç—à–∏ –¥–ª—è Binance
  public binancePerp: ServantConfigCache<string, { data: string }>;
  public binanceSpot: ServantConfigCache<string, { data: string }>;
  // –ö—ç—à–∏ –¥–ª—è Bybit (–ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ –æ–Ω–∏ —Ç–∞–∫–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç, –∏—Å—Ö–æ–¥—è –∏–∑ –ª–æ–≥–∏–∫–∏ —Å–∂–∞—Ç–∏—è/—Ä–∞—Å–ø–∞–∫–æ–≤–∫–∏)
  public bybitPerp: ServantConfigCache<string, { data: string }>;
  public bybitSpot: ServantConfigCache<string, { data: string }>;

  constructor() {
    this.binancePerp = new ServantConfigCache({ stdTTL: 0 });
    this.binanceSpot = new ServantConfigCache({ stdTTL: 0 });
    this.bybitPerp = new ServantConfigCache({ stdTTL: 0 });
    this.bybitSpot = new ServantConfigCache({ stdTTL: 0 });
  }
}

/**
 * `CoinRepo` - —ç—Ç–æ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π –∫–ª–∞—Å—Å, –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–π –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
 * –æ–ø–µ—Ä–∞—Ü–∏—è–º–∏, —Å–≤—è–∑–∞–Ω–Ω—ã–º–∏ —Å –º–æ–Ω–µ—Ç–∞–º–∏, —Ç–∞–∫–∏–º–∏ –∫–∞–∫ –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ API,
 * –∏—Ö —Å–∂–∞—Ç–∏–µ, –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –ø–æ—Å–ª–µ–¥—É—é—â–∞—è —Ä–∞—Å–ø–∞–∫–æ–≤–∫–∞.
 *
 * –û–Ω –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –∏ —Ç–∏–ø–æ–±–µ–∑–æ–ø–∞—Å–Ω—ã–π —Å–ø–æ—Å–æ–± –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è
 * —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –º–æ–Ω–µ—Ç–∞—Ö –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏.
 */
export class CoinRepo {
  // –ü—Ä–∏–≤–∞—Ç–Ω–æ–µ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–≤–æ–π—Å—Ç–≤–æ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è, –±—ã–ª –ª–∏ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.
  private static _initialized: boolean = false;
  // –ü—Ä–∏–≤–∞—Ç–Ω—ã–π —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞—Å—Å–∞ –∫—ç—à–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –º–æ–Ω–µ—Ç–∞—Ö.
  private static binanceDominantCache: BinanceDominantCache;

  // –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π –±–ª–æ–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏, –∫–æ—Ç–æ—Ä—ã–π –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –æ–¥–∏–Ω —Ä–∞–∑ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–ª–∞—Å—Å–∞.
  // –ó–¥–µ—Å—å –º—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–∞—à —ç–∫–∑–µ–º–ø–ª—è—Ä `BinanceDominantCache`.
  static {
    CoinRepo.binanceDominantCache = new BinanceDominantCache();
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –º–æ–Ω–µ—Ç, –∑–∞–≥—Ä—É–∂–∞—è –∏ –∫—ç—à–∏—Ä—É—è –¥–∞–Ω–Ω—ã–µ.
   * –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤—ã–∑–≤–∞–Ω –æ–¥–∏–Ω —Ä–∞–∑ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è,
   * –ø—Ä–µ–∂–¥–µ —á–µ–º –±—É–¥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥—Ä—É–≥–∏–µ –º–µ—Ç–æ–¥—ã `CoinRepo`.
   * –û–Ω –ø–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ API, —Å–∂–∏–º–∞–µ—Ç –∏—Ö –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ –∫—ç—à–µ.
   *
   * @returns {Promise<void>} –ü—Ä–æ–º–∏—Å, –∫–æ—Ç–æ—Ä—ã–π —Ä–∞–∑—Ä–µ—à–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏.
   * @throws {Error} –ï—Å–ª–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∏–∑-–∑–∞ –ø—Ä–æ–±–ª–µ–º —Å API –∏–ª–∏ —Å–∂–∞—Ç–∏–µ–º).
   */
  public static async initialize(): Promise<void> {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏.
    if (CoinRepo._initialized) {
      console.log(
        "üîµ CoinRepo —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—É—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é."
      );
      return;
    }

    try {
      console.log("üîµ CoinRepo ‚Üí –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è...");

      // 1. –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ —á–µ—Ä–µ–∑ API.
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º `this.fetchDominantCoins` –¥–ª—è –≤—ã–∑–æ–≤–∞ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –º–µ—Ç–æ–¥–∞ –≤–Ω—É—Ç—Ä–∏ –∫–ª–∞—Å—Å–∞.
      const [binanceDominantPerpsResponse, binanceDominantSpotResponse] =
        await Promise.all([
          this.fetchDominantCoins("Binance", "perp"),
          this.fetchDominantCoins("Binance", "spot"),
        ]);

      // 2. –°–∂–∏–º–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏.
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–≤–æ–π—Å—Ç–≤–∞ `binanceCoins` –∏ `bybitCoins` –∏–∑ –æ—Ç–≤–µ—Ç–æ–≤ API.
      const [
        compressedBinanceDominantPerpsBinanceCoins,
        compressedBinanceDominantPerpsBybitCoins,
        compressedBinanceDominantSpotBinanceCoins,
        compressedBinanceDominantSpotBybitCoins,
      ] = await Promise.all([
        compressToGzipBase64Async(binanceDominantPerpsResponse.binanceCoins),
        compressToGzipBase64Async(binanceDominantPerpsResponse.bybitCoins),
        compressToGzipBase64Async(binanceDominantSpotResponse.binanceCoins),
        compressToGzipBase64Async(binanceDominantSpotResponse.bybitCoins),
      ]);

      // 3. –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–∂–∞—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –∫—ç—à.
      // –ö–∞–∂–¥—ã–π –∫—ç—à —Ö—Ä–∞–Ω–∏—Ç –æ–±—ä–µ–∫—Ç `{ data: string }`, –≥–¥–µ `data` - —ç—Ç–æ —Å–∂–∞—Ç–∞—è —Å—Ç—Ä–æ–∫–∞.
      this.binanceDominantCache.binancePerp.set("coins", {
        data: compressedBinanceDominantPerpsBinanceCoins,
      });
      this.binanceDominantCache.bybitPerp.set("coins", {
        data: compressedBinanceDominantPerpsBybitCoins,
      });
      this.binanceDominantCache.binanceSpot.set("coins", {
        data: compressedBinanceDominantSpotBinanceCoins,
      });
      this.binanceDominantCache.bybitSpot.set("coins", {
        data: compressedBinanceDominantSpotBybitCoins,
      });

      CoinRepo._initialized = true; // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –≤ true.
      console.log("‚úÖ CoinRepo ‚Üí –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω...");
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ CoinRepo:", error);
      // –ü–µ—Ä–µ–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É, —á—Ç–æ–±—ã –≤—ã–∑—ã–≤–∞—é—â–∏–π –∫–æ–¥ –º–æ–≥ –µ–µ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å.
      throw error;
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–æ–º–∏–Ω–∏—Ä—É—é—â–∏–µ –º–æ–Ω–µ—Ç—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ API.
   * –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é `coinsApi` –∏–∑ `ServantsConfigOperator`.
   *
   * @param dominant –¢–∏–ø –¥–æ–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'Binance', 'Bybit').
   * @param coinType –¢–∏–ø –º–æ–Ω–µ—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'perp', 'spot').
   * @returns {Promise<CoinsApiResponse>} –ü—Ä–æ–º–∏—Å, –∫–æ—Ç–æ—Ä—ã–π —Ä–∞–∑—Ä–µ—à–∞–µ—Ç—Å—è –æ–±—ä–µ–∫—Ç–æ–º —Å –º–∞—Å—Å–∏–≤–∞–º–∏ `Coin`.
   * @throws {Error} –ï—Å–ª–∏ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω, –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è `coinsApi`,
   * –∏–ª–∏ –∑–∞–ø—Ä–æ—Å –∫ API –º–æ–Ω–µ—Ç –Ω–µ —É–¥–∞–ª—Å—è.
   */
  public static async fetchDominantCoins(
    dominant: Dominant,
    coinType: CoinType
  ): Promise<CoinsApiResponse> {
    // –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏–∑ ServantsConfigOperator.
    // –ï—Å–ª–∏ ServantsConfigOperator –Ω–µ –±—ã–ª –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω, —ç—Ç–æ—Ç –≤—ã–∑–æ–≤ –≤—ã–±—Ä–æ—Å–∏—Ç –æ—à–∏–±–∫—É.
    const config = ServantsConfigOperator.getConfig();

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ API.
    if (!config?.coinsApi) {
      throw new Error(
        "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è 'coinsApi' –≤ ServantsConfigOperator. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è."
      );
    }

    // –§–æ—Ä–º–∏—Ä—É–µ–º URL –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∫ API –º–æ–Ω–µ—Ç.
    const url = `${config.coinsApi}/api/coins/sorted?dominant=${dominant}&coinType=${coinType}`;
    try {
      // –í—ã–ø–æ–ª–Ω—è–µ–º HTTP-–∑–∞–ø—Ä–æ—Å.
      const response = await fetch(url);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞. –ï—Å–ª–∏ –æ–Ω –Ω–µ OK (–Ω–∞–ø—Ä–∏–º–µ—Ä, 4xx –∏–ª–∏ 5xx), –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É.
      if (!response.ok) {
        const errorText = await response.text();
        throw new Error(
          `–ó–∞–ø—Ä–æ—Å –∫ API –º–æ–Ω–µ—Ç –Ω–µ —É–¥–∞–ª—Å—è: –°—Ç–∞—Ç—É—Å ${response.status} - ${errorText}`
        );
      }

      // –ü–∞—Ä—Å–∏–º JSON-–æ—Ç–≤–µ—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ–≥–æ.
      // –ü—Ä–∏–≤–æ–¥–∏–º —Ç–∏–ø –∫ `CoinsApiResponse`, –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞—è, —á—Ç–æ API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —ç—Ç—É —Å—Ç—Ä—É–∫—Ç—É—Ä—É.
      return (await response.json()) as CoinsApiResponse;
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ CoinRepo:", error);
      // –ü–µ—Ä–µ–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É, —á—Ç–æ–±—ã –≤—ã–∑—ã–≤–∞—é—â–∏–π –∫–æ–¥ –º–æ–≥ –µ–µ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å.
      throw error;
    }
  }

  /**
   * –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è –ø—Ä–∏–≤–∞—Ç–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π —Ä–∞—Å–ø–∞–∫–æ–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –∫—ç—à–∞.
   * –û–Ω–∞ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —ç–ª–µ–º–µ–Ω—Ç –∫—ç—à–∞ (–∫–æ—Ç–æ—Ä—ã–π —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–∂–∞—Ç—É—é —Å—Ç—Ä–æ–∫—É) –∏ –ø—ã—Ç–∞–µ—Ç—Å—è –µ–≥–æ —Ä–∞—Å–ø–∞–∫–æ–≤–∞—Ç—å.
   *
   * @param cacheItem –≠–ª–µ–º–µ–Ω—Ç, –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –∏–∑ –∫—ç—à–∞, –æ–∂–∏–¥–∞–µ—Ç—Å—è `{ data: string } | undefined`.
   * @returns {Promise<T | null>} –ü—Ä–æ–º–∏—Å, –∫–æ—Ç–æ—Ä—ã–π —Ä–∞–∑—Ä–µ—à–∞–µ—Ç—Å—è —Ä–∞—Å–ø–∞–∫–æ–≤–∞–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ —Ç–∏–ø–∞ `T`
   * –∏–ª–∏ `null`, –µ—Å–ª–∏ —Ä–∞—Å–ø–∞–∫–æ–≤–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å –∏–ª–∏ –¥–∞–Ω–Ω—ã–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.
   */
  private static async _decompressCacheItem<T>(
    cacheItem: { data: string } | undefined
  ): Promise<T | null> {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É –Ω–∞—Å –µ—Å—Ç—å –æ–±—ä–µ–∫—Ç —Å –¥–∞–Ω–Ω—ã–º–∏ –∏ —á—Ç–æ `data` —è–≤–ª—è–µ—Ç—Å—è —Å—Ç—Ä–æ–∫–æ–π.
    if (!cacheItem?.data || typeof cacheItem.data !== "string") {
      return null;
    }
    try {
      // –†–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ–º —Å—Ç—Ä–æ–∫—É —Å –ø–æ–º–æ—â—å—é –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.
      return await decompressFromGzipBase64Async<T>(cacheItem.data);
    } catch (error) {
      console.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞–∫–æ–≤–∞—Ç—å —ç–ª–µ–º–µ–Ω—Ç –∫—ç—à–∞:", error);
      return null;
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –∏ —Ä–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –º–æ–Ω–µ—Ç–∞—Ö –∏–∑ –∫—ç—à–∞.
   * –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è Binance –∏ Bybit, –¥–ª—è Spot –∏ Perps.
   *
   * @returns {Promise<{ binancePerps: Coin[] | null; binanceSpot: Coin[] | null; bybitPerps: Coin[] | null; bybitSpot: Coin[] | null; }>}
   * –ü—Ä–æ–º–∏—Å, –∫–æ—Ç–æ—Ä—ã–π —Ä–∞–∑—Ä–µ—à–∞–µ—Ç—Å—è –æ–±—ä–µ–∫—Ç–æ–º, —Å–æ–¥–µ—Ä–∂–∞—â–∏–º –º–∞—Å—Å–∏–≤—ã `Coin[]` –∏–ª–∏ `null` –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞.
   * @throws {Error} –ï—Å–ª–∏ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.
   */
  public static async getCoinsFromCache(): Promise<{
    binancePerps: Coin[] | null;
    binanceSpot: Coin[] | null;
    bybitPerps: Coin[] | null;
    bybitSpot: Coin[] | null;
  }> {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –ø–µ—Ä–µ–¥ –ø–æ–ª—É—á–µ–Ω–∏–µ–º –¥–∞–Ω–Ω—ã—Ö –∏–∑ –∫—ç—à–∞.
    if (!CoinRepo._initialized) {
      throw new Error(
        "CoinRepo –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –í—ã–∑–æ–≤–∏—Ç–µ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π –º–µ—Ç–æ–¥ initialize() —Å–Ω–∞—á–∞–ª–∞."
      );
    }

    // –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ —Ä–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –≤—Å–µ—Ö —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –∫—ç—à–µ–π.
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –º–µ—Ç–æ–¥ `_decompressCacheItem` –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–∞—Å–ø–∞–∫–æ–≤–∫–∏.
    const [binancePerps, bybitPerps, binanceSpot, bybitSpot] =
      await Promise.all([
        this._decompressCacheItem<Coin[]>(
          this.binanceDominantCache.binancePerp.get("coins")
        ),
        this._decompressCacheItem<Coin[]>(
          this.binanceDominantCache.bybitPerp.get("coins")
        ),
        this._decompressCacheItem<Coin[]>(
          this.binanceDominantCache.binanceSpot.get("coins")
        ),
        this._decompressCacheItem<Coin[]>(
          this.binanceDominantCache.bybitSpot.get("coins")
        ),
      ]);

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—ä–µ–∫—Ç —Å–æ –≤—Å–µ–º–∏ —Ä–∞—Å–ø–∞–∫–æ–≤–∞–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏.
    return { binancePerps, binanceSpot, bybitPerps, bybitSpot };
  }
}
